{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pygame'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-9-0683cbb6c3e3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtorch\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptim\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0moptim\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mgame\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflappy_bird\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mGameState\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mNeuralNetwork\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mModule\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/Desktop/RL/game/flappy_bird.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mitertools\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcycle\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpygame\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pygame'"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import random\n",
    "import sys\n",
    "import time\n",
    "import cv2\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "\n",
    "from game.flappy_bird import GameState\n",
    "\n",
    "class NeuralNetwork(nn.Module):\n",
    "    \n",
    "    def __init__(self):\n",
    "        super(NeuralNetwork, self).__init__()\n",
    "        \n",
    "        self.number_of_actions = 2\n",
    "        self.gamma = 0.99\n",
    "        self.epsilon1 = 0.1\n",
    "        self.epsilon2 = 0.0001\n",
    "        self.number_of_iterations = 100000\n",
    "        self.replay_memory = 10000\n",
    "        self.minibatch_size = 32\n",
    "        \n",
    "        self.conv_layer1 = nn.Conv2d(4, 32, 8, 4)\n",
    "        self.relu1 = nn.ReLU(inplace=True)\n",
    "        self.conv_layer2 = nn.Conv2d(32, 64, 4, 2)\n",
    "        self.relu2 = nn.ReLU(inplace=True)\n",
    "        self.conv_layer3 = nn.Conv2d(64, 64, 3, 1)\n",
    "        self.relu3 = nn.ReLU(inplace=True)\n",
    "        self.fc4 = nn.Linear(3136, 512)\n",
    "        self.relu4 = nn.ReLU(inplace=True)\n",
    "        self.fc5 = nn.Linear(512, self.number_of_actions)\n",
    "        \n",
    "    def forward(self, x):\n",
    "        out = self.conv_layer1(x)\n",
    "        out = self.relu1(out)\n",
    "        out = self.conv_layer2(out)\n",
    "        out = self.relu2(out)\n",
    "        out = self.conv_layer3(out)\n",
    "        out = self.relu3(out)\n",
    "        out = out.view(out.size()[0], -1)\n",
    "        out = self.fc4(out)\n",
    "        out = self.relu4(out)\n",
    "        out = self.fc5(out)\n",
    "        \n",
    "        return out"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def init_weights(w):\n",
    "    if type(w) == nn.Conv2d or type(w) == nn.Linear:\n",
    "        torch.nn.init.uniform(w.weight, -0.01, 0.01)\n",
    "        w.bias.data.fill_(0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def convert_img_to_tensor(img):\n",
    "    img_tensor = img.transpose(2, 0, 1)\n",
    "    img_tensor = img_tensor.astype(np.float32)\n",
    "    img_tensor = torch.from_numpy(img_tensor)\n",
    "    \n",
    "    return img_tensor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def preprocess(img):\n",
    "    img = img[0:288, 0:404]\n",
    "    img_data = cv2.cvtColor(cv2.resize(img, (64, 64)), cv2.COLOR_BGR2GRAY)\n",
    "    img_data[img_data > 0] = 255\n",
    "    img_data = np.reshape(img_data, (64, 64, 1))\n",
    "    \n",
    "    return img_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train(model, start):\n",
    "    optimizer = optim.Adam(model.parameters(), lr = 1e-6)\n",
    "    \n",
    "    criterion = nn.MSELoss()\n",
    "    \n",
    "    game_state = GameState()\n",
    "    \n",
    "    replay_memory = []\n",
    "    \n",
    "    action = torch.zeros([model.number_of_actions], dtype=torch.float32)\n",
    "    action[0] = 1\n",
    "    img_data, reward, done = game_state.frame_step(action)\n",
    "    img_data = preprocess(img_data)\n",
    "    img_data = convert_img_to_tensor(img_data)\n",
    "    state = torch.cat((img_data, img_data, img_data, img_data)).unsqueeze(0)\n",
    "    \n",
    "    epsilon = model.epsilon1\n",
    "    iteration = 0\n",
    "    \n",
    "    epsilon_decrements = np.linspace(model.epsilon1, \n",
    "                                     model.epsilon2, model.number_of_iterations)\n",
    "    \n",
    "    while iteration < model.number_of_iterations:\n",
    "        output = model(state)[0]\n",
    "        \n",
    "        action = torch.zeros([model.number_of_actions], dtype=torch.float32)\n",
    "        \n",
    "        random_action = random.random() <= epsilon\n",
    "        \n",
    "        if random_action:\n",
    "            print(\"Performed random action!\")\n",
    "        \n",
    "        action_index = [torch.randint(model.number_of_actions, \n",
    "                                     torch.Size([]), dtype=torch.int)\n",
    "                        if random_action\n",
    "                        else torch.argmax(output)][0]\n",
    "        \n",
    "        \n",
    "        action[action_index] = 1\n",
    "        \n",
    "        next_img_data, reward, done = game_state.frame_step(action)\n",
    "        next_img_data = preprocess(next_img_data)\n",
    "        next_img_data = convert_img_to_tensor(next_img_data)\n",
    "        next_state = torch.cat((state.squeeze(0)[1:, :, :], next_img_data)).unsqueeze(0)\n",
    "        \n",
    "        action = action.unsqueeze(0)\n",
    "        reward = torch.from_numpy(np.array([reward], dtype=np.float32)).unsqueeze(0)\n",
    "        \n",
    "        \n",
    "        replay_memory.append((state, action, reward, next_state, terminal))\n",
    "        \n",
    "        \n",
    "        if len(replay_memory) > model.replay_memory_size:\n",
    "            replay_memory.pop(0)\n",
    "                \n",
    "        epsilon = epsilon_decrements[iteration]\n",
    "        \n",
    "        batch = random.sample(replay_memory, min(len(replay_memory), model.minibatch_size))\n",
    "        \n",
    "        state_memory = torch.cat(tuple(d[0] for d in batch))\n",
    "        action_memory = torch.cat(tuple(d[1] for d in batch))\n",
    "        reward_memory = torch.cat(tuple(d[2] for d in batch))\n",
    "        next_state_memory = torch.cat(tuple(d[3] for d in batch))\n",
    "        \n",
    "        output_memory = model(next_state_memory)\n",
    "        \n",
    "        y_memory = torch.cat(tuple(reward_memory[i] if minibatch[i][4] else\n",
    "                                  reward_memory[i] + model.gamma * torch.max(output_memory[i])\n",
    "                                  for i in range(len(minibatch))))\n",
    "        \n",
    "        q_value = torch.sum(model(state_memory) * action_memory, dim=1)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        \n",
    "        y_memory = y_memory.detach()\n",
    "        \n",
    "        loss = criterion(q_value, y_memory)\n",
    "        \n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        state = next_state\n",
    "        iteration += 1\n",
    "\n",
    "        print(\"iteration:\", iteration, \"elapsed time:\", time.time() - start, \"epsilon:\", epsilon, \"action:\",\n",
    "              action_index.cpu().detach().numpy(), \"reward:\", reward.numpy()[0][0], \"Q max:\",\n",
    "              np.max(output.cpu().detach().numpy()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def test(model):\n",
    "    game_state = GameState()\n",
    "    \n",
    "    action = torch.zeros([model.number_of_actions], dtype=torch.float32)\n",
    "    action[0] = 1\n",
    "    img_data, reward, done = game_state.frame_step(action)\n",
    "    img_data = preprocess(img_data)\n",
    "    img_data = convert_img_to_tensor(img_data)\n",
    "    state = torch.cat((img_data, img_data, img_data, img_data)).unsqueeze(0)\n",
    "    \n",
    "    while True:\n",
    "        \n",
    "        output = model(state)[0]\n",
    "        action = torch.zeros([model.number_of_actions], dtype=torch.float32)\n",
    "        \n",
    "        action_index = torch.argmax(output)\n",
    "        action[action_index] = 1\n",
    "        \n",
    "        next_img_data, reward, done = game_state.frame_step(action)\n",
    "        next_img_data = preprocess(next_img_data)\n",
    "        next_img_data = convert_img_to_tensor(img_data)\n",
    "        next_state = torch.cat((state.squeeze(0)[1:, :, :], next_img_data)).unsqueeze(0)\n",
    "        \n",
    "        state = next_state"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def main(mode):\n",
    "    cuda_is_available = torch.cuda.is_available()\n",
    "    \n",
    "    if mode == 'train':\n",
    "        model = NeuralNetwork()\n",
    "        model.apply(init_weights)\n",
    "        start = time.time()\n",
    "        \n",
    "        train(model, start)\n",
    "        \n",
    "if __name__ == \"__main__\":\n",
    "    main(sys.argv[1])\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
